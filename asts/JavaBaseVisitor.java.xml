<?xml version="1.0" encoding="UTF-8"?><CompilationUnit><LineComment type="LINE_COMMENT">// Generated from Java.g4 by ANTLR 4.3</LineComment>
<PackageDeclaration><Symbol type="PACKAGE">package</Symbol> <QualifiedName><Symbol type="Identifier">javasharp</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></PackageDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">antlr</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">v4</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">runtime</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">misc</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">NotNull</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">antlr</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">v4</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">runtime</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">tree</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AbstractParseTreeVisitor</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>

<TypeDeclaration><Comment type="COMMENT">/**
 * This class provides an empty implementation of {@link JavaVisitor},
 * which can be extended to create a visitor which only needs to handle a subset
 * of the available methods.
 *
 * @param &lt;T&gt; The return type of the visit operation. Use {@link Void} for
 * operations with no return type.
 */</Comment>
<ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier> <ClassDeclaration><Symbol type="CLASS">class</Symbol> <Symbol type="Identifier">JavaBaseVisitor</Symbol><TypeParameters><Symbol type="LT">&lt;</Symbol><TypeParameter><Symbol type="Identifier">T</Symbol></TypeParameter><Symbol type="GT">&gt;</Symbol></TypeParameters> <Symbol type="EXTENDS">extends</Symbol> <Type><ClassOrInterfaceType><Symbol type="Identifier">AbstractParseTreeVisitor</Symbol><TypeArguments><Symbol type="LT">&lt;</Symbol><TypeArgument><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type></TypeArgument><Symbol type="GT">&gt;</Symbol></TypeArguments></ClassOrInterfaceType></Type> <Symbol type="IMPLEMENTS">implements</Symbol> <TypeList><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaVisitor</Symbol><TypeArguments><Symbol type="LT">&lt;</Symbol><TypeArgument><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type></TypeArgument><Symbol type="GT">&gt;</Symbol></TypeArguments></ClassOrInterfaceType></Type></TypeList> <ClassBody><Symbol type="LBRACE">{</Symbol>
	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitMemberDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">MemberDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitDefaultValue</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">DefaultValueContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationTypeElementDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationTypeElementDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitType</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationTypeBody</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationTypeBodyContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitGenericInterfaceMethodDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">GenericInterfaceMethodDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassBodyDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassBodyDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitBlock</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">BlockContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnumBodyDeclarations</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnumBodyDeclarationsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitForUpdate</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ForUpdateContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnhancedForControl</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnhancedForControlContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationConstantRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationConstantRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitExplicitGenericInvocation</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ExplicitGenericInvocationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitNonWildcardTypeArgumentsOrDiamond</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">NonWildcardTypeArgumentsOrDiamondContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitExpressionList</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ExpressionListContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationTypeElementRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationTypeElementRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassOrInterfaceType</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassOrInterfaceTypeContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeBound</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeBoundContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitVariableDeclaratorId</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">VariableDeclaratorIdContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitPrimary</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">PrimaryContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassCreatorRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassCreatorRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInterfaceBodyDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InterfaceBodyDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeArguments</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeArgumentsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationName</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationNameContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitFinallyBlock</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FinallyBlockContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeParameters</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeParametersContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitLastFormalParameter</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">LastFormalParameterContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitConstructorBody</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ConstructorBodyContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitLiteral</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">LiteralContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationMethodOrConstantRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationMethodOrConstantRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitCatchClause</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CatchClauseContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitVariableDeclarator</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">VariableDeclaratorContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeList</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeListContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnumConstants</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnumConstantsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassBody</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassBodyContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitCreatedName</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CreatedNameContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnumDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnumDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitFormalParameter</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FormalParameterContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitParExpression</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ParExpressionContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotation</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitVariableInitializer</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">VariableInitializerContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitElementValueArrayInitializer</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ElementValueArrayInitializerContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitCreator</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CreatorContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitArrayCreatorRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ArrayCreatorRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitExpression</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ExpressionContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitConstantExpression</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ConstantExpressionContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitQualifiedNameList</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">QualifiedNameListContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitConstructorDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ConstructorDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitForControl</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ForControlContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitSuperSuffix</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SuperSuffixContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitVariableDeclarators</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">VariableDeclaratorsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitCatchType</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CatchTypeContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassOrInterfaceModifier</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassOrInterfaceModifierContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnumConstantName</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnumConstantNameContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitModifier</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ModifierContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInnerCreator</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InnerCreatorContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitExplicitGenericInvocationSuffix</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ExplicitGenericInvocationSuffixContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitVariableModifier</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">VariableModifierContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitElementValuePair</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ElementValuePairContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitArrayInitializer</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ArrayInitializerContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitElementValue</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ElementValueContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitConstDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ConstDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitResource</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ResourceContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitQualifiedName</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">QualifiedNameContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitResourceSpecification</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ResourceSpecificationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitFormalParameterList</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FormalParameterListContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationTypeDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationTypeDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitCompilationUnit</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CompilationUnitContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitAnnotationMethodRest</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">AnnotationMethodRestContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitSwitchBlockStatementGroup</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SwitchBlockStatementGroupContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeParameter</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeParameterContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInterfaceBody</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InterfaceBodyContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitMethodDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">MethodDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitMethodBody</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">MethodBodyContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeArgument</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeArgumentContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitGenericConstructorDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">GenericConstructorDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitClassDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ClassDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitEnumConstant</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">EnumConstantContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitStatement</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">StatementContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitImportDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ImportDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitPrimitiveType</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">PrimitiveTypeContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInterfaceDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InterfaceDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitLocalVariableDeclarationStatement</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">LocalVariableDeclarationStatementContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitBlockStatement</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">BlockStatementContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitFieldDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FieldDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitConstantDeclarator</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ConstantDeclaratorContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitResources</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ResourcesContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitStatementExpression</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">StatementExpressionContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInterfaceMethodDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InterfaceMethodDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitPackageDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">PackageDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitElementValuePairs</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ElementValuePairsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitLocalVariableDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">LocalVariableDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitNonWildcardTypeArguments</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">NonWildcardTypeArgumentsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitInterfaceMemberDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InterfaceMemberDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitSwitchLabel</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SwitchLabelContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitForInit</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ForInitContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitFormalParameters</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FormalParametersContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitArguments</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ArgumentsContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitGenericMethodDeclaration</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">GenericMethodDeclarationContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

	<ClassBodyDeclaration><Comment type="COMMENT">/**
	 * {@inheritDoc}
	 *
	 * &lt;p&gt;The default implementation returns the result of calling
	 * {@link #visitChildren} on {@code ctx}.&lt;/p&gt;
	 */</Comment>
	<Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">T</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">visitTypeArgumentsOrDiamond</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><VariableModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">NotNull</Symbol></QualifiedName></AnnotationName></Annotation></VariableModifier> <Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TypeArgumentsOrDiamondContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol> <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">visitChildren</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement> <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>
<Symbol type="RBRACE">}</Symbol></ClassBody></ClassDeclaration></TypeDeclaration><Symbol type="HIDDEN">&lt;EOF&gt;</Symbol></CompilationUnit>