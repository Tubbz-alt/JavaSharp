<?xml version="1.0" encoding="UTF-8"?><CompilationUnit><Comment type="COMMENT">/*
 * JavaSharp, a free Java to C# translator based on ANTLRv4
 * Copyright (C) 2014  Philip van Oosten
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 * 
 * https://github.com/pvoosten
 */</Comment>
<PackageDeclaration><Symbol type="PACKAGE">package</Symbol> <QualifiedName><Symbol type="Identifier">javasharp</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></PackageDeclaration>

<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Comment type="COMMENT">/* a comment withing a qualified name*/</Comment><Symbol type="Identifier">File</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">util</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">logging</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Level</Symbol></QualifiedName><Comment type="COMMENT">/* after a qualified name */</Comment><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Comment type="COMMENT">/* Before a qualified name */</Comment> <Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">util</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">logging</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Logger</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Result</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration> <ImportDeclaration><LineComment type="LINE_COMMENT">// added white space within qualified name on purpose</LineComment>
<Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Source</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Transformer</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TransformerException</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">TransformerFactory</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SAXSource</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">javax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">stream</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">StreamResult</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InputSource</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>

<TypeDeclaration><Comment type="COMMENT">/**
 *
 * @author PvO
 */</Comment>
<ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier> <ClassDeclaration><Symbol type="CLASS">class</Symbol> <Symbol type="Identifier">Tool</Symbol> <ClassBody><Symbol type="LBRACE">{</Symbol>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PRIVATE">private</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Symbol type="VOID">void</Symbol> <Symbol type="Identifier">convertJavaToXmlSyntaxTree</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">javaSourceFile</Symbol></VariableDeclaratorId></FormalParameter><Symbol type="COMMA">,</Symbol> <FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">xmlOutputFile</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><Symbol type="TRY">try</Symbol> <Block><Symbol type="LBRACE">{</Symbol>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">Transformer</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">transformer</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Expression><Expression><Expression><Expression><Primary><Symbol type="Identifier">TransformerFactory</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">newInstance</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">newTransformer</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">SyntaxTreeXmlFilter</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">xmlEmitter</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">SyntaxTreeXmlFilter</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">Source</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">source</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">SAXSource</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">xmlEmitter</Symbol></Primary></Expression><Symbol type="COMMA">,</Symbol> <Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">InputSource</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">javaSourceFile</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">Result</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">result</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">StreamResult</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">File</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">xmlOutputFile</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">transformer</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">transform</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">source</Symbol></Primary></Expression><Symbol type="COMMA">,</Symbol> <Expression><Primary><Symbol type="Identifier">result</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <Symbol type="RBRACE">}</Symbol></Block> <CatchClause><Symbol type="CATCH">catch</Symbol> <Symbol type="LPAREN">(</Symbol><CatchType><QualifiedName><Symbol type="Identifier">TransformerException</Symbol></QualifiedName></CatchType> <Symbol type="Identifier">ex</Symbol><Symbol type="RPAREN">)</Symbol> <Block><Symbol type="LBRACE">{</Symbol>
            <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Expression><Expression><Primary><Symbol type="Identifier">Logger</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">getLogger</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Expression><Expression><Primary><Type><ClassOrInterfaceType><Symbol type="Identifier">Tool</Symbol></ClassOrInterfaceType></Type><Symbol type="DOT">.</Symbol><Symbol type="CLASS">class</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">getName</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">log</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Expression><Primary><Symbol type="Identifier">Level</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SEVERE</Symbol></Expression><Symbol type="COMMA">,</Symbol> <Expression><Primary><Literal><Symbol type="NullLiteral">null</Symbol></Literal></Primary></Expression><Symbol type="COMMA">,</Symbol> <Expression><Primary><Symbol type="Identifier">ex</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <Symbol type="RBRACE">}</Symbol></Block></CatchClause></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="STATIC">static</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Symbol type="VOID">void</Symbol> <Symbol type="Identifier">main</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType><Symbol type="LBRACK">[</Symbol><Symbol type="RBRACK">]</Symbol></Type> <VariableDeclaratorId><Symbol type="Identifier">args</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <Symbol type="THROWS">throws</Symbol> <QualifiedNameList><QualifiedName><Symbol type="Identifier">Exception</Symbol></QualifiedName></QualifiedNameList> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><Symbol type="IF">if</Symbol> <ParExpression><Symbol type="LPAREN">(</Symbol><Expression><Expression><Expression><Primary><Symbol type="Identifier">args</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">length</Symbol></Expression> <Symbol type="EQUAL">==</Symbol> <Expression><Primary><Literal><Symbol type="IntegerLiteral">2</Symbol></Literal></Primary></Expression></Expression><Symbol type="RPAREN">)</Symbol></ParExpression> <Statement><Block><Symbol type="LBRACE">{</Symbol>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">Tool</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">tool</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">Tool</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">javaInputFile</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Expression><Primary><Symbol type="Identifier">args</Symbol></Primary></Expression><Symbol type="LBRACK">[</Symbol><Expression><Primary><Literal><Symbol type="IntegerLiteral">0</Symbol></Literal></Primary></Expression><Symbol type="RBRACK">]</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">xmlOutputFile</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Expression><Primary><Symbol type="Identifier">args</Symbol></Primary></Expression><Symbol type="LBRACK">[</Symbol><Expression><Primary><Literal><Symbol type="IntegerLiteral">1</Symbol></Literal></Primary></Expression><Symbol type="RBRACK">]</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
            <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">tool</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">convertJavaToXmlSyntaxTree</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">javaInputFile</Symbol></Primary></Expression><Symbol type="COMMA">,</Symbol> <Expression><Primary><Symbol type="Identifier">xmlOutputFile</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <Symbol type="RBRACE">}</Symbol></Block></Statement> <Symbol type="ELSE">else</Symbol> <Statement><Block><Symbol type="LBRACE">{</Symbol>
            <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Expression><Primary><Symbol type="Identifier">System</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">err</Symbol></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">println</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="StringLiteral">"2 arguments required: &lt;java input file&gt; &lt;xml output file&gt;"</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
            <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">System</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">exit</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="IntegerLiteral">1</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <Symbol type="RBRACE">}</Symbol></Block></Statement></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>
<Symbol type="RBRACE">}</Symbol></ClassBody></ClassDeclaration></TypeDeclaration>

<LineComment type="LINE_COMMENT">// Comment at the end of the file</LineComment>
<Comment type="COMMENT">/* Just to verify that it is included in the xml version of the AST */</Comment>
<Symbol type="HIDDEN">&lt;EOF&gt;</Symbol></CompilationUnit>