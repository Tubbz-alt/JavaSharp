<?xml version="1.0" encoding="UTF-8"?><CompilationUnit><Comment type="COMMENT">/* JavaSharp, a free Java to C# translator based on ANTLRv4
 * Copyright (C) 2014  Philip van Oosten
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 * 
 * https://github.com/pvoosten
 */</Comment>

<PackageDeclaration><Symbol type="PACKAGE">package</Symbol> <QualifiedName><Symbol type="Identifier">javasharp</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></PackageDeclaration>

<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">File</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FileNotFoundException</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">FileReader</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">IOException</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">java</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">io</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">Reader</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">antlr</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">v4</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">runtime</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">ANTLRInputStream</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">antlr</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">v4</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">runtime</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">BufferedTokenStream</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">antlr</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">v4</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">runtime</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CommonTokenStream</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">InputSource</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">SAXException</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">XMLReader</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>
<ImportDeclaration><Symbol type="IMPORT">import</Symbol> <QualifiedName><Symbol type="Identifier">org</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">xml</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">sax</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">helpers</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">XMLFilterImpl</Symbol></QualifiedName><Symbol type="SEMI">;</Symbol></ImportDeclaration>

<TypeDeclaration><Comment type="COMMENT">/**
 *
 * @author PvO
 */</Comment>
<ClassDeclaration><Symbol type="CLASS">class</Symbol> <Symbol type="Identifier">SyntaxTreeXmlFilter</Symbol> <Symbol type="EXTENDS">extends</Symbol> <Type><ClassOrInterfaceType><Symbol type="Identifier">XMLFilterImpl</Symbol></ClassOrInterfaceType></Type><ClassBody><Symbol type="LBRACE">{</Symbol>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PRIVATE">private</Symbol></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="FINAL">final</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><FieldDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaLexer</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">lexer</Symbol></VariableDeclaratorId></VariableDeclarator></VariableDeclarators><Symbol type="SEMI">;</Symbol></FieldDeclaration></MemberDeclaration></ClassBodyDeclaration>
    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PRIVATE">private</Symbol></ClassOrInterfaceModifier></Modifier> <Modifier><ClassOrInterfaceModifier><Symbol type="FINAL">final</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><FieldDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">parser</Symbol></VariableDeclaratorId></VariableDeclarator></VariableDeclarators><Symbol type="SEMI">;</Symbol></FieldDeclaration></MemberDeclaration></ClassBodyDeclaration>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><ConstructorDeclaration><Symbol type="Identifier">SyntaxTreeXmlFilter</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></FormalParameters><ConstructorBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Primary><Symbol type="Identifier">lexer</Symbol></Primary></Expression> <Symbol type="ASSIGN">=</Symbol> <Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">JavaLexer</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="NullLiteral">null</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Primary><Symbol type="Identifier">parser</Symbol></Primary></Expression> <Symbol type="ASSIGN">=</Symbol> <Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">JavaParser</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="NullLiteral">null</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">parser</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">setBuildParseTree</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="BooleanLiteral">true</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>

    <Symbol type="RBRACE">}</Symbol></Block></ConstructorBody></ConstructorDeclaration></MemberDeclaration></ClassBodyDeclaration>
    
    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PRIVATE">private</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CompilationUnitContext</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">readSourceFile</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">javaSourceFile</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <Symbol type="THROWS">throws</Symbol> <QualifiedNameList><QualifiedName><Symbol type="Identifier">FileNotFoundException</Symbol></QualifiedName><Symbol type="COMMA">,</Symbol> <QualifiedName><Symbol type="Identifier">IOException</Symbol></QualifiedName></QualifiedNameList> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Expression><Primary><Symbol type="Identifier">readSourceFile</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">File</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">javaSourceFile</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Symbol type="PRIVATE">private</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CompilationUnitContext</Symbol></ClassOrInterfaceType></Type> <Symbol type="Identifier">readSourceFile</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">File</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">javaSourceFile</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <Symbol type="THROWS">throws</Symbol> <QualifiedNameList><QualifiedName><Symbol type="Identifier">FileNotFoundException</Symbol></QualifiedName><Symbol type="COMMA">,</Symbol> <QualifiedName><Symbol type="Identifier">IOException</Symbol></QualifiedName></QualifiedNameList> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">Reader</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">fileReader</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">FileReader</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">javaSourceFile</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">ANTLRInputStream</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">is</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">ANTLRInputStream</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">fileReader</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">lexer</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">setInputStream</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">is</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">CommonTokenStream</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">tokens</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">CommonTokenStream</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">lexer</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">tokens</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">fill</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">parser</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">setTokenStream</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">tokens</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CompilationUnitContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Expression><Expression><Primary><Symbol type="Identifier">parser</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">compilationUnit</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><Statement><Symbol type="RETURN">return</Symbol> <Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier>
    <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Symbol type="VOID">void</Symbol> <Symbol type="Identifier">parse</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">InputSource</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">input</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <Symbol type="THROWS">throws</Symbol> <QualifiedNameList><QualifiedName><Symbol type="Identifier">SAXException</Symbol></QualifiedName><Symbol type="COMMA">,</Symbol> <QualifiedName><Symbol type="Identifier">IOException</Symbol></QualifiedName></QualifiedNameList> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Primary><Symbol type="Identifier">parse</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Expression><Expression><Primary><Symbol type="Identifier">input</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">getSystemId</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>
    
    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier>
    <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Symbol type="VOID">void</Symbol> <Symbol type="Identifier">parse</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">String</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">javaSourcePath</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <Symbol type="THROWS">throws</Symbol> <QualifiedNameList><QualifiedName><Symbol type="Identifier">SAXException</Symbol></QualifiedName><Symbol type="COMMA">,</Symbol> <QualifiedName><Symbol type="Identifier">IOException</Symbol></QualifiedName></QualifiedNameList> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><LineComment type="LINE_COMMENT">// parse the Java file(s) with the ANTLR generated parser</LineComment>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">JavaParser</Symbol><Symbol type="DOT">.</Symbol><Symbol type="Identifier">CompilationUnitContext</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">ctx</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Expression><Primary><Symbol type="Identifier">readSourceFile</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">javaSourcePath</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><LineComment type="LINE_COMMENT">// visit the AST with the XmlEmittingVisitor, which generates SAX events</LineComment>
        <Statement><StatementExpression><Expression><Expression><Primary><Symbol type="Identifier">startDocument</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol type="Identifier">XmlEmittingVisitor</Symbol></ClassOrInterfaceType></Type> <VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Symbol type="Identifier">visitor</Symbol></VariableDeclaratorId> <Symbol type="ASSIGN">=</Symbol> <VariableInitializer><Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">XmlEmittingVisitor</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="THIS">this</Symbol></Primary></Expression><Symbol type="COMMA">,</Symbol> <Expression><Symbol type="LPAREN">(</Symbol><Type><ClassOrInterfaceType><Symbol type="Identifier">BufferedTokenStream</Symbol></ClassOrInterfaceType></Type><Symbol type="RPAREN">)</Symbol> <Expression><Expression><Expression><Primary><Symbol type="Identifier">parser</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">getTokenStream</Symbol></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol type="SEMI">;</Symbol></LocalVariableDeclarationStatement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol type="Identifier">visitor</Symbol></Primary></Expression><Symbol type="DOT">.</Symbol><Symbol type="Identifier">visit</Symbol></Expression><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Symbol type="Identifier">ctx</Symbol></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
        <BlockStatement><Statement><StatementExpression><Expression><Expression><Primary><Symbol type="Identifier">endDocument</Symbol></Primary></Expression><Symbol type="LPAREN">(</Symbol><Symbol type="RPAREN">)</Symbol></Expression></StatementExpression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>

    <ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Annotation><Symbol type="AT">@</Symbol><AnnotationName><QualifiedName><Symbol type="Identifier">Override</Symbol></QualifiedName></AnnotationName></Annotation></ClassOrInterfaceModifier></Modifier>
    <Modifier><ClassOrInterfaceModifier><Symbol type="PUBLIC">public</Symbol></ClassOrInterfaceModifier></Modifier> <MemberDeclaration><MethodDeclaration><Symbol type="VOID">void</Symbol> <Symbol type="Identifier">setParent</Symbol><FormalParameters><Symbol type="LPAREN">(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol type="Identifier">XMLReader</Symbol></ClassOrInterfaceType></Type> <VariableDeclaratorId><Symbol type="Identifier">parent</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol type="RPAREN">)</Symbol></FormalParameters> <MethodBody><Block><Symbol type="LBRACE">{</Symbol>
        <BlockStatement><Statement><Symbol type="THROW">throw</Symbol> <Expression><Symbol type="NEW">new</Symbol> <Creator><CreatedName><Symbol type="Identifier">UnsupportedOperationException</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol type="LPAREN">(</Symbol><ExpressionList><Expression><Primary><Literal><Symbol type="StringLiteral">"This xml filter emits events that are linked to source code, without XML parser."</Symbol></Literal></Primary></Expression></ExpressionList><Symbol type="RPAREN">)</Symbol></Arguments></ClassCreatorRest></Creator></Expression><Symbol type="SEMI">;</Symbol></Statement></BlockStatement>
    <Symbol type="RBRACE">}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>    
<Symbol type="RBRACE">}</Symbol></ClassBody></ClassDeclaration></TypeDeclaration>
<Symbol type="HIDDEN">&lt;EOF&gt;</Symbol></CompilationUnit>