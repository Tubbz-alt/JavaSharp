<?xml version="1.0" encoding="UTF-8"?><CompilationUnit><Comment>/*
 * JavaSharp, a free Java to C# translator based on ANTLRv4
 * Copyright (C) 2014  Philip van Oosten
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 * 
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.
 * 
 * https://github.com/pvoosten
 */</Comment>
<PackageDeclaration><Symbol>package</Symbol><QualifiedName> <Symbol>javasharp</Symbol></QualifiedName><Symbol>;</Symbol></PackageDeclaration><ImportDeclaration>

<Symbol>import</Symbol><QualifiedName> <Symbol>java</Symbol><Symbol>.</Symbol><Symbol>io</Symbol><Symbol>.</Symbol><Comment>/* a comment withing a qualified name*/</Comment><Symbol>File</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>java</Symbol><Symbol>.</Symbol><Symbol>util</Symbol><Symbol>.</Symbol><Symbol>logging</Symbol><Symbol>.</Symbol><Symbol>Level</Symbol></QualifiedName><Comment>/* after a qualified name */</Comment><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Comment>/* Before a qualified name */</Comment><Symbol>java</Symbol><Symbol>.</Symbol><Symbol>util</Symbol><Symbol>.</Symbol><Symbol>logging</Symbol><Symbol>.</Symbol><Symbol>Logger</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol> <Symbol>.</Symbol> <Symbol>Result</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration> <LineComment>// added white space within qualified name on purpose</LineComment>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>Source</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>Transformer</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>TransformerException</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>TransformerFactory</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>sax</Symbol><Symbol>.</Symbol><Symbol>SAXSource</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>javax</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>transform</Symbol><Symbol>.</Symbol><Symbol>stream</Symbol><Symbol>.</Symbol><Symbol>StreamResult</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><ImportDeclaration>
<Symbol>import</Symbol><QualifiedName> <Symbol>org</Symbol><Symbol>.</Symbol><Symbol>xml</Symbol><Symbol>.</Symbol><Symbol>sax</Symbol><Symbol>.</Symbol><Symbol>InputSource</Symbol></QualifiedName><Symbol>;</Symbol></ImportDeclaration><TypeDeclaration>

<Comment>/**
 *
 * @author PvO
 */</Comment>
<ClassOrInterfaceModifier><Symbol>public</Symbol></ClassOrInterfaceModifier><ClassDeclaration> <Symbol>class</Symbol> <Symbol>Tool</Symbol><ClassBody> <Symbol>{</Symbol><ClassBodyDeclaration>

    <Modifier><ClassOrInterfaceModifier><Symbol>private</Symbol></ClassOrInterfaceModifier></Modifier><MemberDeclaration> <MethodDeclaration><Symbol>void</Symbol> <Symbol>convertJavaToXmlSyntaxTree</Symbol><FormalParameters><Symbol>(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol>String</Symbol></ClassOrInterfaceType></Type><VariableDeclaratorId> <Symbol>javaSourceFile</Symbol></VariableDeclaratorId></FormalParameter><Symbol>,</Symbol><FormalParameter> <Type><ClassOrInterfaceType><Symbol>String</Symbol></ClassOrInterfaceType></Type><VariableDeclaratorId> <Symbol>xmlOutputFile</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol>)</Symbol></FormalParameters><MethodBody> <Block><Symbol>{</Symbol><BlockStatement>
        <Statement><Symbol>try</Symbol><Block> <Symbol>{</Symbol><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>Transformer</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>transformer</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Expression><Expression><Expression><Expression><Primary><Symbol>TransformerFactory</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>newInstance</Symbol></Expression><Symbol>(</Symbol><Symbol>)</Symbol></Expression><Symbol>.</Symbol><Symbol>newTransformer</Symbol></Expression><Symbol>(</Symbol><Symbol>)</Symbol></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>SyntaxTreeXmlFilter</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>xmlEmitter</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Symbol>new</Symbol><Creator> <CreatedName><Symbol>SyntaxTreeXmlFilter</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>Source</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>source</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Symbol>new</Symbol><Creator> <CreatedName><Symbol>SAXSource</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><ExpressionList><Expression><Primary><Symbol>xmlEmitter</Symbol></Primary></Expression><Symbol>,</Symbol><Expression> <Symbol>new</Symbol><Creator> <CreatedName><Symbol>InputSource</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><ExpressionList><Expression><Primary><Symbol>javaSourceFile</Symbol></Primary></Expression></ExpressionList><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>Result</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>result</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Symbol>new</Symbol><Creator> <CreatedName><Symbol>StreamResult</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><ExpressionList><Expression><Symbol>new</Symbol><Creator> <CreatedName><Symbol>File</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><ExpressionList><Expression><Primary><Symbol>xmlOutputFile</Symbol></Primary></Expression></ExpressionList><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol>transformer</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>transform</Symbol></Expression><Symbol>(</Symbol><ExpressionList><Expression><Primary><Symbol>source</Symbol></Primary></Expression><Symbol>,</Symbol><Expression> <Primary><Symbol>result</Symbol></Primary></Expression></ExpressionList><Symbol>)</Symbol></Expression></StatementExpression><Symbol>;</Symbol></Statement></BlockStatement>
        <Symbol>}</Symbol></Block><CatchClause> <Symbol>catch</Symbol> <Symbol>(</Symbol><CatchType><QualifiedName><Symbol>TransformerException</Symbol></QualifiedName></CatchType> <Symbol>ex</Symbol><Symbol>)</Symbol><Block> <Symbol>{</Symbol><BlockStatement>
            <Statement><StatementExpression><Expression><Expression><Expression><Expression><Expression><Primary><Symbol>Logger</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>getLogger</Symbol></Expression><Symbol>(</Symbol><ExpressionList><Expression><Expression><Expression><Primary><Type><ClassOrInterfaceType><Symbol>Tool</Symbol></ClassOrInterfaceType></Type><Symbol>.</Symbol><Symbol>class</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>getName</Symbol></Expression><Symbol>(</Symbol><Symbol>)</Symbol></Expression></ExpressionList><Symbol>)</Symbol></Expression><Symbol>.</Symbol><Symbol>log</Symbol></Expression><Symbol>(</Symbol><ExpressionList><Expression><Expression><Primary><Symbol>Level</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>SEVERE</Symbol></Expression><Symbol>,</Symbol><Expression> <Primary><Literal><Symbol>null</Symbol></Literal></Primary></Expression><Symbol>,</Symbol><Expression> <Primary><Symbol>ex</Symbol></Primary></Expression></ExpressionList><Symbol>)</Symbol></Expression></StatementExpression><Symbol>;</Symbol></Statement></BlockStatement>
        <Symbol>}</Symbol></Block></CatchClause></Statement></BlockStatement>
    <Symbol>}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration><ClassBodyDeclaration>

    <Modifier><ClassOrInterfaceModifier><Symbol>public</Symbol></ClassOrInterfaceModifier></Modifier><Modifier> <ClassOrInterfaceModifier><Symbol>static</Symbol></ClassOrInterfaceModifier></Modifier><MemberDeclaration> <MethodDeclaration><Symbol>void</Symbol> <Symbol>main</Symbol><FormalParameters><Symbol>(</Symbol><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Symbol>String</Symbol></ClassOrInterfaceType><Symbol>[</Symbol><Symbol>]</Symbol></Type><VariableDeclaratorId> <Symbol>args</Symbol></VariableDeclaratorId></FormalParameter></FormalParameterList><Symbol>)</Symbol></FormalParameters> <Symbol>throws</Symbol><QualifiedNameList> <QualifiedName><Symbol>Exception</Symbol></QualifiedName></QualifiedNameList><MethodBody> <Block><Symbol>{</Symbol><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>Tool</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>tool</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Symbol>new</Symbol><Creator> <CreatedName><Symbol>Tool</Symbol></CreatedName><ClassCreatorRest><Arguments><Symbol>(</Symbol><Symbol>)</Symbol></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>String</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>javaInputFile</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Primary><Literal><Symbol>"D:\\workspace\\JavaSharp\\JavaSharp\\src\\main\\java\\javasharp\\Tool.java"</Symbol></Literal></Primary></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Symbol>String</Symbol></ClassOrInterfaceType></Type><VariableDeclarators> <VariableDeclarator><VariableDeclaratorId><Symbol>xmlOutputFile</Symbol></VariableDeclaratorId> <Symbol>=</Symbol><VariableInitializer> <Expression><Primary><Literal><Symbol>"D:\\workspace\\JavaSharp\\JavaSharp\\src\\main\\java\\javasharp\\Tool.xml"</Symbol></Literal></Primary></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Symbol>;</Symbol></LocalVariableDeclarationStatement></BlockStatement><BlockStatement>
        <Statement><StatementExpression><Expression><Expression><Expression><Primary><Symbol>tool</Symbol></Primary></Expression><Symbol>.</Symbol><Symbol>convertJavaToXmlSyntaxTree</Symbol></Expression><Symbol>(</Symbol><ExpressionList><Expression><Primary><Symbol>javaInputFile</Symbol></Primary></Expression><Symbol>,</Symbol><Expression> <Primary><Symbol>xmlOutputFile</Symbol></Primary></Expression></ExpressionList><Symbol>)</Symbol></Expression></StatementExpression><Symbol>;</Symbol></Statement></BlockStatement>
    <Symbol>}</Symbol></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration>
<Symbol>}</Symbol></ClassBody></ClassDeclaration></TypeDeclaration>

<LineComment>// Comment at the end of the file</LineComment>
<Comment>/* Just to verify that it is included in the xml version of the AST */</Comment>
<Symbol>&lt;EOF&gt;</Symbol></CompilationUnit>