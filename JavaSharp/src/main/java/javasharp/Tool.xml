<?xml version="1.0" encoding="UTF-8"?><CompilationUnit><PackageDeclaration><Token>/*&#13;
 * JavaSharp, a free Java to C# translator based on ANTLRv4&#13;
 * Copyright (C) 2014  Philip van Oosten&#13;
 * &#13;
 * This program is free software: you can redistribute it and/or modify&#13;
 * it under the terms of the GNU Affero General Public License as&#13;
 * published by the Free Software Foundation, either version 3 of the&#13;
 * License, or (at your option) any later version.&#13;
 * &#13;
 * This program is distributed in the hope that it will be useful,&#13;
 * but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
 * GNU Affero General Public License for more details.&#13;
 * &#13;
 * You should have received a copy of the GNU Affero General Public License&#13;
 * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 * &#13;
 * https://github.com/pvoosten&#13;
 */</Token><Token>&#13;
</Token><Token>package</Token><QualifiedName><Token> </Token><Token>javasharp</Token></QualifiedName><Token>;</Token></PackageDeclaration><ImportDeclaration><Token>&#13;
&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>java</Token><Token>.</Token><Token>io</Token><Token>.</Token><Token>File</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>java</Token><Token>.</Token><Token>util</Token><Token>.</Token><Token>logging</Token><Token>.</Token><Token>Level</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>java</Token><Token>.</Token><Token>util</Token><Token>.</Token><Token>logging</Token><Token>.</Token><Token>Logger</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>Result</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>Source</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>Transformer</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>TransformerException</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>TransformerFactory</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>sax</Token><Token>.</Token><Token>SAXSource</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>javax</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>transform</Token><Token>.</Token><Token>stream</Token><Token>.</Token><Token>StreamResult</Token></QualifiedName><Token>;</Token></ImportDeclaration><ImportDeclaration><Token>&#13;
</Token><Token>import</Token><QualifiedName><Token> </Token><Token>org</Token><Token>.</Token><Token>xml</Token><Token>.</Token><Token>sax</Token><Token>.</Token><Token>InputSource</Token></QualifiedName><Token>;</Token></ImportDeclaration><TypeDeclaration><ClassOrInterfaceModifier><Token>&#13;
&#13;
</Token><Token>/**&#13;
 *&#13;
 * @author PvO&#13;
 */</Token><Token>&#13;
</Token><Token>public</Token></ClassOrInterfaceModifier><ClassDeclaration><Token> </Token><Token>class</Token><Token> </Token><Token>Tool</Token><ClassBody><Token> </Token><Token>{</Token><ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Token>&#13;
&#13;
    </Token><Token>private</Token></ClassOrInterfaceModifier></Modifier><MemberDeclaration><MethodDeclaration><Token> </Token><Token>void</Token><Token> </Token><Token>convertJavaToXmlSyntaxTree</Token><FormalParameters><Token>(</Token><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Token>String</Token></ClassOrInterfaceType></Type><VariableDeclaratorId><Token> </Token><Token>javaSourceFile</Token></VariableDeclaratorId></FormalParameter><Token>,</Token><FormalParameter><Type><ClassOrInterfaceType><Token> </Token><Token>String</Token></ClassOrInterfaceType></Type><VariableDeclaratorId><Token> </Token><Token>xmlOutputFile</Token></VariableDeclaratorId></FormalParameter></FormalParameterList><Token>)</Token></FormalParameters><MethodBody><Block><Token> </Token><Token>{</Token><BlockStatement><Statement><Token>&#13;
        </Token><Token>try</Token><Block><Token> </Token><Token>{</Token><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>Transformer</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>transformer</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Expression><Expression><Expression><Expression><Primary><Token> </Token><Token>TransformerFactory</Token></Primary></Expression><Token>.</Token><Token>newInstance</Token></Expression><Token>(</Token><Token>)</Token></Expression><Token>.</Token><Token>newTransformer</Token></Expression><Token>(</Token><Token>)</Token></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>SyntaxTreeXmlFilter</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>xmlEmitter</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Token> </Token><Token>new</Token><Creator><CreatedName><Token> </Token><Token>SyntaxTreeXmlFilter</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>Source</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>source</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Token> </Token><Token>new</Token><Creator><CreatedName><Token> </Token><Token>SAXSource</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><ExpressionList><Expression><Primary><Token>xmlEmitter</Token></Primary></Expression><Token>,</Token><Expression><Token> </Token><Token>new</Token><Creator><CreatedName><Token> </Token><Token>InputSource</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><ExpressionList><Expression><Primary><Token>javaSourceFile</Token></Primary></Expression></ExpressionList><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>Result</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>result</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Token> </Token><Token>new</Token><Creator><CreatedName><Token> </Token><Token>StreamResult</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><ExpressionList><Expression><Token>new</Token><Creator><CreatedName><Token> </Token><Token>File</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><ExpressionList><Expression><Primary><Token>xmlOutputFile</Token></Primary></Expression></ExpressionList><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></ExpressionList><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Token>&#13;
        </Token><Token>transformer</Token></Primary></Expression><Token>.</Token><Token>transform</Token></Expression><Token>(</Token><ExpressionList><Expression><Primary><Token>source</Token></Primary></Expression><Token>,</Token><Expression><Primary><Token> </Token><Token>result</Token></Primary></Expression></ExpressionList><Token>)</Token></Expression></StatementExpression><Token>;</Token></Statement></BlockStatement><Token>&#13;
        </Token><Token>}</Token></Block><CatchClause><Token> </Token><Token>catch</Token><Token> </Token><Token>(</Token><CatchType><QualifiedName><Token>TransformerException</Token></QualifiedName></CatchType><Token> </Token><Token>ex</Token><Token>)</Token><Block><Token> </Token><Token>{</Token><BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Expression><Expression><Primary><Token>&#13;
            </Token><Token>Logger</Token></Primary></Expression><Token>.</Token><Token>getLogger</Token></Expression><Token>(</Token><ExpressionList><Expression><Expression><Expression><Primary><Type><ClassOrInterfaceType><Token>Tool</Token></ClassOrInterfaceType></Type><Token>.</Token><Token>class</Token></Primary></Expression><Token>.</Token><Token>getName</Token></Expression><Token>(</Token><Token>)</Token></Expression></ExpressionList><Token>)</Token></Expression><Token>.</Token><Token>log</Token></Expression><Token>(</Token><ExpressionList><Expression><Expression><Primary><Token>Level</Token></Primary></Expression><Token>.</Token><Token>SEVERE</Token></Expression><Token>,</Token><Expression><Primary><Literal><Token> </Token><Token>null</Token></Literal></Primary></Expression><Token>,</Token><Expression><Primary><Token> </Token><Token>ex</Token></Primary></Expression></ExpressionList><Token>)</Token></Expression></StatementExpression><Token>;</Token></Statement></BlockStatement><Token>&#13;
        </Token><Token>}</Token></Block></CatchClause></Statement></BlockStatement><Token>&#13;
    </Token><Token>}</Token></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration><ClassBodyDeclaration><Modifier><ClassOrInterfaceModifier><Token>&#13;
&#13;
    </Token><Token>public</Token></ClassOrInterfaceModifier></Modifier><Modifier><ClassOrInterfaceModifier><Token> </Token><Token>static</Token></ClassOrInterfaceModifier></Modifier><MemberDeclaration><MethodDeclaration><Token> </Token><Token>void</Token><Token> </Token><Token>main</Token><FormalParameters><Token>(</Token><FormalParameterList><FormalParameter><Type><ClassOrInterfaceType><Token>String</Token></ClassOrInterfaceType><Token>[</Token><Token>]</Token></Type><VariableDeclaratorId><Token> </Token><Token>args</Token></VariableDeclaratorId></FormalParameter></FormalParameterList><Token>)</Token></FormalParameters><Token> </Token><Token>throws</Token><QualifiedNameList><QualifiedName><Token> </Token><Token>Exception</Token></QualifiedName></QualifiedNameList><MethodBody><Block><Token> </Token><Token>{</Token><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>Tool</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>tool</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Token> </Token><Token>new</Token><Creator><CreatedName><Token> </Token><Token>Tool</Token></CreatedName><ClassCreatorRest><Arguments><Token>(</Token><Token>)</Token></Arguments></ClassCreatorRest></Creator></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>String</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>javaInputFile</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Primary><Literal><Token> </Token><Token>"D:\\workspace\\JavaSharp\\JavaSharp\\src\\main\\java\\javasharp\\Tool.java"</Token></Literal></Primary></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><LocalVariableDeclarationStatement><LocalVariableDeclaration><Type><ClassOrInterfaceType><Token>&#13;
        </Token><Token>String</Token></ClassOrInterfaceType></Type><VariableDeclarators><VariableDeclarator><VariableDeclaratorId><Token> </Token><Token>xmlOutputFile</Token></VariableDeclaratorId><Token> </Token><Token>=</Token><VariableInitializer><Expression><Primary><Literal><Token> </Token><Token>"D:\\workspace\\JavaSharp\\JavaSharp\\src\\main\\java\\javasharp\\Tool.xml"</Token></Literal></Primary></Expression></VariableInitializer></VariableDeclarator></VariableDeclarators></LocalVariableDeclaration><Token>;</Token></LocalVariableDeclarationStatement></BlockStatement><BlockStatement><Statement><StatementExpression><Expression><Expression><Expression><Primary><Token>&#13;
        </Token><Token>tool</Token></Primary></Expression><Token>.</Token><Token>convertJavaToXmlSyntaxTree</Token></Expression><Token>(</Token><ExpressionList><Expression><Primary><Token>javaInputFile</Token></Primary></Expression><Token>,</Token><Expression><Primary><Token> </Token><Token>xmlOutputFile</Token></Primary></Expression></ExpressionList><Token>)</Token></Expression></StatementExpression><Token>;</Token></Statement></BlockStatement><Token>&#13;
    </Token><Token>}</Token></Block></MethodBody></MethodDeclaration></MemberDeclaration></ClassBodyDeclaration><Token>&#13;
</Token><Token>}</Token></ClassBody></ClassDeclaration></TypeDeclaration><Token>&#13;
&#13;
</Token><Token>&lt;EOF&gt;</Token></CompilationUnit>